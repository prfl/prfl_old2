@page "/admin/link/create/{linkType}"
@using Profile.Client.Components.Forms
@using Profile.Client.Components.Prfl
@using Profile.Shared.Models.Admin
@using Profile.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient client
@layout AppLayout
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@{
    string title = $"Create - {linkType}";
}
<Title Value="@title" />

<h3 class="display-3">Create a new <strong class="text-primary">@linkType</strong></h3>
<hr />
<div class="col-md-6"> 


    @if(linkType.ToUpper() == "PROJECT") {
        <div>
            <ProjectForm Project="@Project" OnValidSubmit="@CreateProject"/>
        </div>
    
    }
    else if(linkType.ToUpper() == "LINK") {
        <div>
            <LinkForm Link="@Link" OnValidSubmit="@CreateLink"/>
        </div>
    }
    else if(linkType.ToUpper() == "ACCOUNT") {
        <div>
            <AccountForm Account="@Account" Applications="@Applications" OnValidSubmit="@CreateAccount"/>
        </div>
    }
    else if(linkType.ToUpper() == "VIDEO") {
        <div>
            <VideoForm Video="@Video" OnValidSubmit="@CreateVideo"/>
        </div>
    }
    else if(linkType.ToUpper() == "SCHEDULE") {
        <div>
            <ScheduleForm Schedule="@Schedule" OnValidSubmit="@CreateSchedule"/>
        </div>
    }


</div>

@code {

    [Parameter] public string username { get; set; }
    [Parameter] public string linkType { get; set; }
    private Application[] Applications { get; set; }
    private Account Account = new Account();
    private Project Project = new Project();
    private Link Link = new Link();
    private Video Video = new Video();
    private Schedule Schedule = new Schedule();


    protected override async Task OnInitializedAsync() {
        Applications = await client.GetFromJsonAsync<Application[]>("api/application");
    }
    private async Task CreateProject() {
        await client.PostAsJsonAsync("api/project", Project);
        NavigationManager.NavigateTo("admin/project");
        
    }

    private async Task CreateLink() {
        await client.PostAsJsonAsync("api/link", Link);
        NavigationManager.NavigateTo("admin/link");
    }

    private async Task CreateAccount() {
        await client.PostAsJsonAsync("api/account", Account);
        NavigationManager.NavigateTo("admin/account");
    }

    private async Task CreateVideo() {
        await client.PostAsJsonAsync("api/video", Video);
        NavigationManager.NavigateTo("admin/video");
    }

    private async Task CreateSchedule() {
        await client.PostAsJsonAsync("api/schedule", Schedule);
        NavigationManager.NavigateTo("admin/schedule");
    }

}