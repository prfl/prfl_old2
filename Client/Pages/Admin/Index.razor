@page "/admin/{linkType}"
@using Profile.Client.Components
@using Profile.Client.Components.Admin
@using Profile.Client.Components.Prfl
@using Profile.Shared.Models
@inject HttpClient client
@inject IJSRuntime jsRuntime
@layout AppLayout
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<Title Value="@linkType" />


<div class="row mt-2">
  <div class="col">
    <a href="/admin/link/choose-type" class="btn btn-primary mb-2 float-left">Add Link</a>
  </div>
  @if(!String.IsNullOrEmpty(username)) {
    <div class="col">
        <a href="./@username" class="badge bg-primary mt-2 float-end">prfl.ga/@username</a>
    </div>
    }
</div>


@if(linkType.ToUpper() == "ACCOUNT") {
    @if(Accounts == null) {
        <div>
            <Loading />
        </div>
    }
    else if(Accounts.Length == 0) {
        <div>
            <NoLink LinkType="account" />
        </div>
    }
    else {
      @foreach(var account in Accounts) {
        var userLink = account.Application.ApplicationUserLink + account.Username;
        var editLink = $"admin/account/{account.AccountId}/edit";
        <div>
            <AccountAdminCard BackgroundColor="@account.Application.BackgroundColor" 
                            ApplicationLink="@account.Application.ApplicationLink" 
                            LogoLink="@account.Application.LogoLink" 
                            TextColor="@account.Application.TextColor" 
                            Username="@account.Username" 
                            UserLink="@userLink"
                            EditLink="@editLink"
                            IsFavorite="@account.IsFavorite"
                            Remove="(() => DeleteLink(account.AccountId, linkType, account.Username))"/>
        </div>
        }  
    }
} 

else if(linkType.ToUpper() == "LINK") {
    @if(Links == null) {
        <div>
            <Loading />
        </div>
    }
    else if(Links.Length == 0) {
        <div>
            <NoLink LinkType="link" />
        </div>
    }
    else {
      @foreach(var link in Links) {
        var modalId = GetModalId();
        var editLink = $"admin/link/{link.LinkId}/edit";
        <div>
            <LinkAdminCard ModalId="@modalId" 
                      Link="@link.Url" 
                      Name="@link.Name" 
                      Description="@link.Description" 
                      IconUrl="/assets/icons/link.svg"
                      IsFavorite="@link.IsFavorite" 
                      EditLink="@editLink"
                      RemoveMenuName="Delete"
                      Remove="(() => DeleteLink(link.LinkId, linkType, link.Name))"/>
        </div> 
      }
    }
}

else if(linkType.ToUpper() == "PROJECT") {
    @if(Projects == null) {
        <div>
            <Loading />
        </div>
    }
    else if(Projects.Length == 0) {
        <div>
            <NoLink LinkType="project" />
        </div>
    }
    else {
      @foreach(var project in Projects) {
            var modalId = GetModalId();
            var editLink = $"admin/project/{project.ProjectId}/edit";
            <div>
                <LinkAdminCard   ModalId="@modalId" 
                            Link="@project.Url" 
                            Name="@project.Name" 
                            Description="@project.Description" 
                            IconUrl="/assets/icons/kanban.svg" 
                            IsFavorite="@project.IsFavorite" 
                            EditLink="@editLink"
                            RemoveMenuName="Delete"
                            Remove="(() => DeleteLink(project.ProjectId, linkType, project.Name))"/>
            </div>
        }
    }
}

else if(linkType.ToUpper() == "VIDEO") {
    @if(Videos == null) {
        <div>
            <Loading />
        </div>
    }
    else if(Videos.Length == 0) {
        <div>
            <NoLink LinkType="video" />
        </div>
    }
    else {
      @foreach(var video in Videos) {
        var modalId = GetModalId();
        var editLink = $"admin/video/{video.VideoId}/edit";
        <div>
            <LinkAdminCard ModalId="@modalId" 
                      Link="@video.Url" 
                      Name="@video.Name" 
                      Description="@video.Description" 
                      IconUrl="/assets/icons/video.svg"
                      IsFavorite="@video.IsFavorite"
                      EditLink="@editLink" 
                      RemoveMenuName="Delete"
                      Remove="(() => DeleteLink(video.VideoId, linkType, video.Name))"/>
        </div>
      }
    }
}

else if(linkType.ToUpper() == "SCHEDULE") {
    @if(Schedules == null) {
        <div>
            <Loading />
        </div>
    }
    else if(Schedules.Length == 0) {
        <div>
            <NoLink LinkType="schedule" />
        </div>
    }
    else {
      @foreach(var schedule in Schedules) {
        var modalId = GetModalId();
        var editLink = $"admin/schedule/{schedule.ScheduleId}/edit";
        <div>
            <ScheduleAdminCard ModalId="@modalId" 
                      Link="@schedule.Url" 
                      Name="@schedule.Name" 
                      Description="@schedule.Description" 
                      Location="@schedule.Location"
                      Weekday="@schedule.Weekday"
                      Time="@schedule.Time"
                      IconUrl="/assets/icons/calendar2.svg"
                      IsFavorite="@schedule.IsFavorite"
                      EditLink="@editLink" 
                      RemoveMenuName="Delete"
                      Remove="(() => DeleteLink(schedule.ScheduleId, linkType, schedule.Name))"/>
        </div>
      }
    }
}

else if(linkType.ToUpper() == "FAVORITE") {
    @if(Favorites == null) {
        <div>
            <Loading />
        </div>
    }
    else if(Favorites.Count() == 0) {
      <div>
            <NoLink LinkType="favorite" />
        </div>
    }
    else {
      @foreach(var favorite in Favorites) {
        var modalId = GetModalId();

        if(favorite.Type == LinkType.Account) {
          SetAccount(favorite.LinkId);
          var userLink = Account.Application.ApplicationUserLink + Account.Username;
          var editLink = $"admin/account/{Account.AccountId}/edit";

          <div>
            <AccountAdminCard   BackgroundColor="@Account.Application.BackgroundColor" 
                            ApplicationLink="@Account.Application.ApplicationLink" 
                            LogoLink="@Account.Application.LogoLink" 
                            TextColor="@Account.Application.TextColor" 
                            IsFavorite="@true"
                            Username="@Account.Username" 
                            UserLink="@userLink"
                            EditLink="@editLink"
                            Remove="(() => DeleteLink(favorite.FavoriteId, linkType, favorite.Name))"
                            OnClickUpCallback="(() => OnClickUpAsync(favorite.FavoriteId, linkType))"
                            OnClickDownCallback="(() => OnClickDownAsync(favorite.FavoriteId, linkType))"/>
          </div>
        }

        else {
            
           
            var editLink = $"admin/{Enum.GetName(typeof(LinkType), favorite.Type).ToLower()}/{favorite.LinkId}/edit";
          <div>
            <LinkAdminCard Link="@favorite.Url" 
                      Name="@favorite.Name" 
                      Description="@favorite.Description" 
                      IconUrl="@favorite.IconUrl" 
                      IsFavorite="@true"
                      RemoveMenuName="Remove Favorite"
                      EditLink="@editLink"
                      Remove="(() => DeleteLink(favorite.FavoriteId, linkType, favorite.Name))"
                      OnClickUpCallback="(() => OnClickUpAsync(favorite.FavoriteId, linkType))"
                      OnClickDownCallback="(() => OnClickDownAsync(favorite.FavoriteId, linkType))"/>
          </div>
        }

      }
    }
}



@code {
    [Parameter] public string username { get; set; }
    [Parameter] public string linkType { get; set; }
    private int Count = 1;
    private Link[] Links { get; set; }
    private Account[] Accounts { get; set; }
    private Project[] Projects { get; set; }
    private Video[] Videos { get; set; }
    private Favorite[] Favorites { get; set; }
    private Schedule[] Schedules { get; set; }
    private Account Account { get; set; }
    

    protected override async Task OnParametersSetAsync() {
        await GetData(linkType);
    }

    private async Task GetData(string linkType) {

        var user = await client.GetFromJsonAsync<ProfileUser>("api/user");
        username = user.UserName;
        
        if(linkType.ToUpper() == "LINK") {
            Links = await client.GetFromJsonAsync<Link[]>($"api/{linkType}");
        }
        else if(linkType.ToUpper() == "ACCOUNT") {
            Accounts = await client.GetFromJsonAsync<Account[]>($"api/{linkType}");
        }
        else if(linkType.ToUpper() == "PROJECT") {
            Projects = await client.GetFromJsonAsync<Project[]>($"api/{linkType}");
        }
        else if(linkType.ToUpper() == "VIDEO") {
            Videos = await client.GetFromJsonAsync<Video[]>($"api/{linkType}");
        }
        else if(linkType.ToUpper() == "FAVORITE") {
            Favorites = await client.GetFromJsonAsync<Favorite[]>($"api/{linkType}");
            Accounts = await client.GetFromJsonAsync<Account[]>($"api/account");
        }
        else if(linkType.ToUpper() == "SCHEDULE") {
            Schedules = await client.GetFromJsonAsync<Schedule[]>($"api/{linkType}");
        }
        
    }

    private string GetModalId()
    {
        var num = Count++;
        return "modal" + num;
    }

    private void SetAccount(string accountId){ 
      Account = Accounts.FirstOrDefault(a => a.AccountId == accountId);
    }

    private async Task DeleteLink(string linkId, string linkType, string linkName) { 
        bool isConfirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete your {linkType} {linkName}?");
        if(isConfirmed) {
            await client.DeleteAsync($"api/{linkType}/{linkId}");
            await OnInitializedAsync();
        }
    }

        
    private async Task OnClickUpAsync(string linkId, string linkType) {         
        if(linkType.ToUpper() == "FAVORITE") {
            var link = Favorites.FirstOrDefault(f => f.FavoriteId == linkId);
            if(link != null && link.Order > 1) {
                var otherLink = Favorites.FirstOrDefault(f => f.Order ==  link.Order - 1);
                link.Order -= 1;
                otherLink.Order += 1;
                await client.PutAsJsonAsync($"api/{linkType}/{link.FavoriteId}", link);
                await client.PutAsJsonAsync($"api/{linkType}/{otherLink.FavoriteId}", otherLink);
                await OnInitializedAsync();
            }  
        }
    }
    private async Task OnClickDownAsync(string linkId, string linkType) {         
        if(linkType.ToUpper() == "FAVORITE") {
            var link = Favorites.FirstOrDefault(f => f.FavoriteId == linkId);
            if(link != null && link.Order < Favorites.Count()) {
                var otherLink = Favorites.FirstOrDefault(f => f.Order ==  link.Order + 1);
                link.Order += 1;
                otherLink.Order -= 1;
                await client.PutAsJsonAsync($"api/{linkType}/{link.FavoriteId}", link);
                await client.PutAsJsonAsync($"api/{linkType}/{otherLink.FavoriteId}", otherLink);
                await OnInitializedAsync();
            }  
        }
    }
    
    
    
}