@page "/{username}"
@using Microsoft.AspNetCore.Authorization
@using Profile.Client.Components
@using Profile.Client.Components.Prfl
@using Profile.Shared.Models
@inject Services.StateContainer StateContainer
@inject HttpClient client
@inject IHttpClientFactory ClientFactory
@layout MainLayout


<Title Value="@username" />



@if(Favorites == null) {
      <div>
        <Loading />
      </div>
    }
else if(Favorites.Count() == 0) {
  <div class="alert alert-info mt-3" role="alert">
        The user does not have any favorites yet.
  </div>

}

else {
  @foreach(var favorite in Favorites) {
    var modalId = GetModalId(); 

    if(favorite.Type == LinkType.Account ) {
      if(Accounts != null) {
        SetAccount(favorite.LinkId);
        var userLink = Account.Application.ApplicationUserLink + Account.Username;

        <div>
          <Profile.Client.Components.Prfl.AccountCard  BackgroundColor="@Account.Application.BackgroundColor" 
                        ApplicationLink="@Account.Application.ApplicationLink" 
                        LogoLink="@Account.Application.LogoLink" 
                        TextColor="@Account.Application.TextColor" 
                        Username="@Account.Username" 
                        UserLink="@userLink"
                        UserId="@User.UserId"
                        LinkId="@favorite.LinkId"
                        Type="@LinkType.Account"/>
        </div>
      }
      
    }
    else if(favorite.Type == LinkType.Schedule ) {
      if(Accounts != null) {
        SetSchedule(favorite.LinkId);
        //var userLink = Account.Application.ApplicationUserLink + Account.Username;

        <div>
          <Profile.Client.Components.Prfl.ScheduleCard   
                        ModalId="@modalId" 
                        Url="@favorite.Url" 
                        Name="@favorite.Name" 
                        Description="@favorite.Description" 
                        Location="@Schedule.Location"
                        Weekday="@Schedule.Weekday"
                        Time="@Schedule.Time"
                        IconUrl="/assets/icons/calendar2.svg"
                        UserId="@User.UserId"
                        LinkId="@favorite.LinkId"
                        Type="@LinkType.Schedule"/>
        </div>
      }
      
    }
    else if (favorite.Type == LinkType.Recipe) {
      if(Recipes != null) {
        
        <div>
          <RecipeCard ModalId="@modalId" Recipe="SetRecipe(favorite.LinkId)" Ingredients="@Ingredients" GetIngredients="(() => GetIngredients(favorite.LinkId))"/>
        </div>
      }
    }
    else {
      
      <div>
        <Profile.Client.Components.Prfl.LinkCard Url="@favorite.Url" 
                  Name="@favorite.Name" 
                  ModalId="@modalId"
                  Description="@favorite.Description" 
                  IconUrl="@favorite.IconUrl"
                  UserId="@User.UserId"
                  LinkId="@favorite.LinkId"
                  Type="@favorite.Type"/>
    </div>
    }
    
  }
}



@code {
    [Parameter] public string username { get; set; }
    private int Count = 1;
    private Favorite[] Favorites { get; set; }
    private Account[] Accounts { get; set; }
    private Account Account { get; set; }
    private Schedule Schedule { get; set; }
    private Schedule[] Schedules { get; set; }
    private Recipe[] Recipes { get; set; }
    private Ingredient[] Ingredients { get; set; }
    private User User { get; set;}


    protected override async Task OnInitializedAsync() {

        ChangePropertyValue();
        ChangeIconValue();

        StateContainer.OnChange += StateHasChanged;

        var client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");

        Favorites = await client.GetFromJsonAsync<Favorite[]>($"api/favorite/u/{username}");
        Accounts = await client.GetFromJsonAsync<Account[]>($"api/account/u/{username}");
        Schedules = await client.GetFromJsonAsync<Schedule[]>($"api/Schedule/u/{username}");
        Recipes = await client.GetFromJsonAsync<Recipe[]>($"api/Recipe/u/{username}");
        
        User = await client.GetFromJsonAsync<User>($"api/user/u/{username}");
        
        StateContainer.OnChange += StateHasChanged;
    }

    private void ChangePropertyValue()
    {
        StateContainer.SetProperty(username);
    }



    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    private void ChangeIconValue()
    {
        StateContainer.SetAccountIcon("/assets/icons/account.svg");
        StateContainer.SetLinkIcon("/assets/icons/link-fill-ns.svg");
        StateContainer.SetFavoriteIcon("/assets/icons/star-fill.svg");
        StateContainer.SetProjectIcon("/assets/icons/kanban.svg");
        StateContainer.SetVideoIcon("/assets/icons/video.svg");
        StateContainer.SetScheduleIcon("/assets/icons/calendar2.svg");
        StateContainer.SetChefIcon("/assets/icons/food.svg");
        StateContainer.SetBartenderIcon("/assets/icons/alcohol.svg");
    }

    private string GetModalId()
    {
        var num = Count++;
        return "modal" + num;
    }

    private void SetAccount(string accountId){ 
      Account = Accounts.FirstOrDefault(a => a.AccountId == accountId);
    }
    private void SetSchedule(string scheduleId){ 
      Schedule = Schedules.FirstOrDefault(a => a.ScheduleId == scheduleId);
    }

    private Recipe SetRecipe(string recipeId){ 
      return Recipes.FirstOrDefault(a => a.RecipeId == recipeId);
    }

    public async Task GetIngredients(string recipeId) {
        Ingredients = await client.GetFromJsonAsync<Ingredient[]>($"api/ingredient/recipe/{recipeId}");
        StateHasChanged();
    }
    



    


}

      