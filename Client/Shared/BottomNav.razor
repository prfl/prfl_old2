@using Profile.Shared.Models
@inject Services.StateContainer StateContainer
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory


<div class="container-fluid mt-6">
<div class="row place-buttom shadow-sm rounded text-center row-cols-5">
    <div class="col">
        <NavLink class="nav-link" href="@accountUrl" Match="NavLinkMatch.All">
            <img src="@accountIcon" >
        </NavLink>
    </div>
    <div class="col">
        <NavLink class="nav-link" Match="NavLinkMatch.All" href="@linkUrl">
            <img src="@linkIcon" >
        </NavLink>
    </div>
    <div class="col">
        <NavLink class="nav-link" Match="NavLinkMatch.All" href="@favoriteUrl">
            <img src="@favoriteIcon" >
        </NavLink>
    </div>
    @if(User != null && User.ProfileUserType == ProfileUserType.Trainer) {
        <div class="col">
            <NavLink class="nav-link" href="@scheduleUrl"  Match="NavLinkMatch.All">
                <img src="@scheduleIcon" >
            </NavLink>
        </div>
        
    }
    else if(User != null && User.ProfileUserType == ProfileUserType.Chef) {
        <div class="col">
            <NavLink class="nav-link" href='@($"{StateContainer.Username}/recipes")' Match="NavLinkMatch.All">
                <img src='@($"{StateContainer.ChefIconUrl}")' >
            </NavLink>
        </div>
    }
    else if(User != null && User.ProfileUserType == ProfileUserType.Bartender) {
        <div class="col">
            <NavLink class="nav-link" href='@($"{StateContainer.Username}/cocktails")' Match="NavLinkMatch.All">
                <img src='@($"{StateContainer.BartenderIconUrl}")' >
            </NavLink>
        </div>
    }
    else {
        <div class="col">
            <NavLink class="nav-link" href="@projectUrl"  Match="NavLinkMatch.All">
                <img src="@projectIcon" >
            </NavLink>
        </div>
    }
    
    
    <div class="col">
        <NavLink class="nav-link" href="@videoUrl"  Match="NavLinkMatch.All">
            <img src="@videoIcon" >
        </NavLink>
    </div>
</div>

</div>

@code {
    [Parameter] public string Username { get; set; }

    private string favoriteUrl =>  StateContainer != null ? $"{StateContainer.Username}" : "";
    private string accountUrl =>  StateContainer != null ? $"{StateContainer.Username}/accounts" : "";
    private string linkUrl =>  StateContainer != null ? $"{StateContainer.Username}/links" : "";
    private string projectUrl =>  StateContainer != null ? $"{StateContainer.Username}/projects" : "";
    private string videoUrl =>  StateContainer != null ? $"{StateContainer.Username}/videos" : "";
    private string scheduleUrl =>  StateContainer != null ? $"{StateContainer.Username}/schedules" : "";

    private string favoriteIcon =>  StateContainer.FavoriteIconUrl != null ? $"{StateContainer.FavoriteIconUrl}" : "/assets/icons/star.svg";
    private string accountIcon =>  StateContainer.AccountIconUrl != null ? $"{StateContainer.AccountIconUrl}" : "/assets/icons/account.svg";
    private string linkIcon =>  StateContainer.LinkIconUrl != null ? $"{StateContainer.LinkIconUrl}" : "/assets/icons/link.svg";
    private string projectIcon =>  StateContainer.ProjectIconUrl != null ? $"{StateContainer.ProjectIconUrl}" : "/assets/icons/kanban.svg";
    private string videoIcon =>  StateContainer.VideoIconUrl != null ? $"{StateContainer.VideoIconUrl}" : "/assets/icons/video.svg";
    private string scheduleIcon =>  StateContainer.ScheduleIconUrl != null ? $"{StateContainer.ScheduleIconUrl}" : "/assets/icons/calendar2.svg";
    //private string chefIcon =>  StateContainer.ScheduleIconUrl != null ? $"{StateContainer.ScheduleIconUrl}" : "/assets/icons/food.svg";
    //private string bartenderIcon =>  StateContainer.ScheduleIconUrl != null ? $"{StateContainer.ScheduleIconUrl}" : "/assets/icons/alcohol.svg";

    public User User { get; set; }



    protected override async Task OnParametersSetAsync() {
        
        var client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        if(Username.Length > 0) {
            User = await client.GetFromJsonAsync<User>($"api/user/u/{Username}");
        
        }
    }

}
